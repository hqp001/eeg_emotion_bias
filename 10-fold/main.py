# -*- coding: utf-8 -*-
"""Gender_Bias.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EKxPBHajS6Te26vZXzfQZl3rlPHZs1t-
"""

import logging
import os
import random
import sys
import time
from argparse import ArgumentParser
from NoValidationDataSetModule import DataSetModule
from Model import core_model
from Trainer import tune_asha, train_test_eeg_no_tune
import json

from torcheeg.datasets import DREAMERDataset
from torcheeg.datasets.constants.emotion_recognition.dreamer import DREAMER_CHANNEL_LOCATION_DICT
from torcheeg import transforms, io

# import shutil

import numpy as np
import torch

## Set up constant parameter

parser = ArgumentParser()

parser.add_argument("--emotion", required=True, default="arousal")
parser.add_argument("--num_gpus", type=int, default=4)
parser.add_argument("--model", default="TSCeption")
parser.add_argument("--seed", type=int, default = 42)

args = parser.parse_args()

global_seed = args.seed
emotion = args.emotion
model_name = args.model
num_gpus = args.num_gpus
PREFIX = os.path.dirname(os.path.abspath(__file__))

def seed_everything(seed):
    random.seed(seed)
    np.random.seed(seed)
    os.environ["PYTHONHASHSEED"] = str(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False

if torch.cuda.is_available():
    print(torch.cuda.get_device_name(0))

print("Hyper parameter")
print(f'Path prefix: {os.path.abspath(PREFIX)}')
print(f'Emotion: {emotion}')
print(f'Model name: {model_name}')
print(f'Num GPU: {args.num_gpus}')

seed_everything(global_seed)

data_path = os.path.abspath('./Gender_Bias_Emotion/dreamer/tsception/data')

def read_data(emotion):
    # Change this
    data = DREAMERDataset(
        io_path=data_path,
        mat_path=data_path,
        offline_transform=transforms.Compose([
            transforms.BaselineRemoval(),
            transforms.MeanStdNormalize(),
            transforms.To2d()
        ]),
        online_transform=transforms.ToTensor(),
        label_transform=transforms.Compose(
            [transforms.Select(emotion),
             transforms.Binary(3.0)]),
        chunk_size=128,
        baseline_chunk_size=128,
        num_baseline=61,
        num_worker=16)
    b = io.MetaInfoIO(data_path + '/info.csv')
    data.info = b.read_all()
    return data

class data:
    def __init__(self, emotion):
        # Change this
        data.name = "DREAMER"
        data.data = read_data(emotion)

dsm = DataSetModule(emotion, PREFIX, data(emotion))
print(dsm.)
print(lajfalkj)
print("Data preparation done")

for idx in range(10):
    # best_config = tune_asha(dsm, core_model, PREFIX, idx, num_samples=1, num_epochs=1, gpus_per_trial=1)
    best_config = {
        "lr": 1e-3,
        "batch_size": 32
    }

    time.sleep(10)
    
    train_test_eeg_no_tune(best_config, num_epochs=50, num_gpus=1, data = dsm, core_model = core_model, PREFIX = PREFIX, idx = idx)
    
    time.sleep(10)
    
    print("FINISH TRAIN AND TEST")
print("FINISH EVERYTHING")

